
US_LCD_PRJ_Davy_Raitt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800128  00800128  0000114a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d6  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0e  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c0  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d5  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000493  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	5a c2       	rjmp	.+1204   	; 0x4ba <__vector_1>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 32       	cpi	r26, 0x28	; 40
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e2       	ldi	r26, 0x28	; 40
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 33       	cpi	r26, 0x31	; 49
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	21 d2       	rcall	.+1090   	; 0x506 <main>
      c4:	e2 c7       	rjmp	.+4036   	; 0x108a <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <sendUSPulse>:
enum display_status display_state = CENTIMETER; // starting the display in CM


void sendUSPulse()
{
	PORTB = 0x00; // 10 us low pulse
      c8:	18 ba       	out	0x18, r1	; 24
	wait_us(10);
      ca:	8a e0       	ldi	r24, 0x0A	; 10
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	cc d2       	rcall	.+1432   	; 0x668 <wait_us>
	PORTB = 0x01;
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	88 bb       	out	0x18, r24	; 24
      d4:	08 95       	ret

000000d6 <setDisplayState>:
}

void setDisplayState()
{
	switch (displaycounter)
      d6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <displaycounter>
      da:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <displaycounter+0x1>
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	91 05       	cpc	r25, r1
      e2:	69 f0       	breq	.+26     	; 0xfe <setDisplayState+0x28>
      e4:	1c f4       	brge	.+6      	; 0xec <setDisplayState+0x16>
      e6:	89 2b       	or	r24, r25
      e8:	39 f0       	breq	.+14     	; 0xf8 <setDisplayState+0x22>
      ea:	08 95       	ret
      ec:	82 30       	cpi	r24, 0x02	; 2
      ee:	91 05       	cpc	r25, r1
      f0:	51 f0       	breq	.+20     	; 0x106 <setDisplayState+0x30>
      f2:	03 97       	sbiw	r24, 0x03	; 3
      f4:	61 f0       	breq	.+24     	; 0x10e <setDisplayState+0x38>
      f6:	08 95       	ret
	{
		case 0:
		display_state = CENTIMETER;
      f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
		break;
      fc:	08 95       	ret
		case 1:
		display_state = MILLIMETER;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		break;
     104:	08 95       	ret
		case 2:
		display_state = INCHES;
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		break;
     10c:	08 95       	ret
		case 3:
		display_state = RICEGRAIN;
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
     114:	08 95       	ret

00000116 <writeDistanceToLEDS>:
		break;
	}
}

void writeDistanceToLEDS()
{
     116:	cf 92       	push	r12
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
	if (distanceInCM <= 10){
     11e:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <distanceInCM>
     122:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <distanceInCM+0x1>
     126:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <distanceInCM+0x2>
     12a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <distanceInCM+0x3>
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e2       	ldi	r20, 0x20	; 32
     134:	51 e4       	ldi	r21, 0x41	; 65
     136:	bb d2       	rcall	.+1398   	; 0x6ae <__cmpsf2>
     138:	18 16       	cp	r1, r24
     13a:	2c f0       	brlt	.+10     	; 0x146 <writeDistanceToLEDS+0x30>
		PORTA = 0b00000001;			// Write 10101010b PORTD
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	8b bb       	out	0x1b, r24	; 27
		wait_ms( 100 );
     140:	84 e6       	ldi	r24, 0x64	; 100
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9b d2       	rcall	.+1334   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 20 && distanceInCM >= 10){
     146:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     14a:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     14e:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     152:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	40 ea       	ldi	r20, 0xA0	; 160
     15c:	51 e4       	ldi	r21, 0x41	; 65
     15e:	c7 01       	movw	r24, r14
     160:	b6 01       	movw	r22, r12
     162:	a5 d2       	rcall	.+1354   	; 0x6ae <__cmpsf2>
     164:	18 16       	cp	r1, r24
     166:	74 f0       	brlt	.+28     	; 0x184 <writeDistanceToLEDS+0x6e>
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e2       	ldi	r20, 0x20	; 32
     16e:	51 e4       	ldi	r21, 0x41	; 65
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	eb d3       	rcall	.+2006   	; 0x94c <__gesf2>
     176:	88 23       	and	r24, r24
     178:	2c f0       	brlt	.+10     	; 0x184 <writeDistanceToLEDS+0x6e>
		PORTA = 0b00000011;			// Write 10101010b PORTD
     17a:	83 e0       	ldi	r24, 0x03	; 3
		wait_ms( 100 );
     17c:	8b bb       	out	0x1b, r24	; 27
     17e:	84 e6       	ldi	r24, 0x64	; 100
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	7c d2       	rcall	.+1272   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 30 && distanceInCM >= 20){
     184:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     188:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     18c:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     190:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	40 ef       	ldi	r20, 0xF0	; 240
     19a:	51 e4       	ldi	r21, 0x41	; 65
     19c:	c7 01       	movw	r24, r14
     19e:	b6 01       	movw	r22, r12
     1a0:	86 d2       	rcall	.+1292   	; 0x6ae <__cmpsf2>
     1a2:	18 16       	cp	r1, r24
     1a4:	74 f0       	brlt	.+28     	; 0x1c2 <writeDistanceToLEDS+0xac>
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	40 ea       	ldi	r20, 0xA0	; 160
     1ac:	51 e4       	ldi	r21, 0x41	; 65
     1ae:	c7 01       	movw	r24, r14
     1b0:	b6 01       	movw	r22, r12
     1b2:	cc d3       	rcall	.+1944   	; 0x94c <__gesf2>
     1b4:	88 23       	and	r24, r24
		PORTA = 0b00000111;			// Write 10101010b PORTD
     1b6:	2c f0       	brlt	.+10     	; 0x1c2 <writeDistanceToLEDS+0xac>
     1b8:	87 e0       	ldi	r24, 0x07	; 7
		wait_ms( 100 );
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	84 e6       	ldi	r24, 0x64	; 100
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	5d d2       	rcall	.+1210   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 40 && distanceInCM >= 30){
     1c2:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     1c6:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     1ca:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     1ce:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	52 e4       	ldi	r21, 0x42	; 66
     1da:	c7 01       	movw	r24, r14
     1dc:	b6 01       	movw	r22, r12
     1de:	67 d2       	rcall	.+1230   	; 0x6ae <__cmpsf2>
     1e0:	18 16       	cp	r1, r24
     1e2:	74 f0       	brlt	.+28     	; 0x200 <writeDistanceToLEDS+0xea>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 ef       	ldi	r20, 0xF0	; 240
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	ad d3       	rcall	.+1882   	; 0x94c <__gesf2>
     1f2:	88 23       	and	r24, r24
		PORTA = 0b00001111;			// Write 10101010b PORTD
     1f4:	2c f0       	brlt	.+10     	; 0x200 <writeDistanceToLEDS+0xea>
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
		wait_ms( 100 );
     1f8:	8b bb       	out	0x1b, r24	; 27
     1fa:	84 e6       	ldi	r24, 0x64	; 100
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	3e d2       	rcall	.+1148   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 50 && distanceInCM >= 40){
     200:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     204:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     208:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     20c:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	48 e4       	ldi	r20, 0x48	; 72
     216:	52 e4       	ldi	r21, 0x42	; 66
     218:	c7 01       	movw	r24, r14
     21a:	b6 01       	movw	r22, r12
     21c:	48 d2       	rcall	.+1168   	; 0x6ae <__cmpsf2>
     21e:	18 16       	cp	r1, r24
     220:	74 f0       	brlt	.+28     	; 0x23e <writeDistanceToLEDS+0x128>
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e2       	ldi	r20, 0x20	; 32
     228:	52 e4       	ldi	r21, 0x42	; 66
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	8e d3       	rcall	.+1820   	; 0x94c <__gesf2>
     230:	88 23       	and	r24, r24
		PORTA = 0b00011111;			// Write 10101010b PORTD
     232:	2c f0       	brlt	.+10     	; 0x23e <writeDistanceToLEDS+0x128>
     234:	8f e1       	ldi	r24, 0x1F	; 31
		wait_ms( 100 );
     236:	8b bb       	out	0x1b, r24	; 27
     238:	84 e6       	ldi	r24, 0x64	; 100
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	1f d2       	rcall	.+1086   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 60 && distanceInCM >= 50){
     23e:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     242:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     246:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     24a:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	40 e7       	ldi	r20, 0x70	; 112
     254:	52 e4       	ldi	r21, 0x42	; 66
     256:	c7 01       	movw	r24, r14
     258:	b6 01       	movw	r22, r12
     25a:	29 d2       	rcall	.+1106   	; 0x6ae <__cmpsf2>
     25c:	18 16       	cp	r1, r24
     25e:	74 f0       	brlt	.+28     	; 0x27c <writeDistanceToLEDS+0x166>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	48 e4       	ldi	r20, 0x48	; 72
     266:	52 e4       	ldi	r21, 0x42	; 66
     268:	c7 01       	movw	r24, r14
     26a:	b6 01       	movw	r22, r12
     26c:	6f d3       	rcall	.+1758   	; 0x94c <__gesf2>
     26e:	88 23       	and	r24, r24
     270:	2c f0       	brlt	.+10     	; 0x27c <writeDistanceToLEDS+0x166>
		PORTA = 0b00111111;			// Write 10101010b PORTD
     272:	8f e3       	ldi	r24, 0x3F	; 63
     274:	8b bb       	out	0x1b, r24	; 27
		wait_ms( 100 );
     276:	84 e6       	ldi	r24, 0x64	; 100
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	00 d2       	rcall	.+1024   	; 0x67c <wait_ms>
	}
	
	if (distanceInCM <= 70 && distanceInCM >= 60){
     27c:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <distanceInCM>
     280:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <distanceInCM+0x1>
     284:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <distanceInCM+0x2>
     288:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <distanceInCM+0x3>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	4c e8       	ldi	r20, 0x8C	; 140
     292:	52 e4       	ldi	r21, 0x42	; 66
     294:	c7 01       	movw	r24, r14
     296:	b6 01       	movw	r22, r12
     298:	0a d2       	rcall	.+1044   	; 0x6ae <__cmpsf2>
     29a:	18 16       	cp	r1, r24
     29c:	74 f0       	brlt	.+28     	; 0x2ba <writeDistanceToLEDS+0x1a4>
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e7       	ldi	r20, 0x70	; 112
     2a4:	52 e4       	ldi	r21, 0x42	; 66
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	50 d3       	rcall	.+1696   	; 0x94c <__gesf2>
     2ac:	88 23       	and	r24, r24
		PORTA = 0b01111111;			// Write 10101010b PORTD
     2ae:	2c f0       	brlt	.+10     	; 0x2ba <writeDistanceToLEDS+0x1a4>
     2b0:	8f e7       	ldi	r24, 0x7F	; 127
		wait_ms( 100 );
     2b2:	8b bb       	out	0x1b, r24	; 27
     2b4:	84 e6       	ldi	r24, 0x64	; 100
     2b6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	if (distanceInCM >= 79){
     2b8:	e1 d1       	rcall	.+962    	; 0x67c <wait_ms>
     2ba:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <distanceInCM>
     2be:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <distanceInCM+0x1>
     2c2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <distanceInCM+0x2>
     2c6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <distanceInCM+0x3>
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	4e e9       	ldi	r20, 0x9E	; 158
     2d0:	52 e4       	ldi	r21, 0x42	; 66
     2d2:	3c d3       	rcall	.+1656   	; 0x94c <__gesf2>
     2d4:	88 23       	and	r24, r24
     2d6:	2c f0       	brlt	.+10     	; 0x2e2 <writeDistanceToLEDS+0x1cc>
		PORTA = 0b11111111;			// Write 10101010b PORTD
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	8b bb       	out	0x1b, r24	; 27
		wait_ms( 100 );
     2dc:	84 e6       	ldi	r24, 0x64	; 100
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	cd d1       	rcall	.+922    	; 0x67c <wait_ms>
     2e2:	ff 90       	pop	r15
	}
}
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	08 95       	ret

000002ec <writeDistanceToLCD>:
     2ec:	0f 93       	push	r16

void writeDistanceToLCD()
{
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2a 97       	sbiw	r28, 0x0a	; 10
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	lcd_clear();
     304:	a6 d1       	rcall	.+844    	; 0x652 <lcd_clear>
	wait_ms(200);
     306:	88 ec       	ldi	r24, 0xC8	; 200
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	b8 d1       	rcall	.+880    	; 0x67c <wait_ms>
	
	
	if (display_state == CENTIMETER){
     30c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     310:	81 11       	cpse	r24, r1
     312:	2a c0       	rjmp	.+84     	; 0x368 <writeDistanceToLCD+0x7c>
		int distanceincmint = (int)distanceInCM; // convert distance float to distance int
     314:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <distanceInCM>
     318:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <distanceInCM+0x1>
     31c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <distanceInCM+0x2>
     320:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <distanceInCM+0x3>
     324:	30 d2       	rcall	.+1120   	; 0x786 <__fixsfsi>
		sprintf(str, "%d", distanceincmint);  // converting the distance in cm integer to a string
     326:	7f 93       	push	r23
     328:	6f 93       	push	r22
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	8e 01       	movw	r16, r28
     334:	0f 5f       	subi	r16, 0xFF	; 255
     336:	1f 4f       	sbci	r17, 0xFF	; 255
     338:	1f 93       	push	r17
     33a:	0f 93       	push	r16
     33c:	cb d3       	rcall	.+1942   	; 0xad4 <sprintf>
		strcat(str, " CM"); // adding text after the string
     33e:	f8 01       	movw	r30, r16
     340:	01 90       	ld	r0, Z+
     342:	00 20       	and	r0, r0
     344:	e9 f7       	brne	.-6      	; 0x340 <writeDistanceToLCD+0x54>
     346:	31 97       	sbiw	r30, 0x01	; 1
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	93 e4       	ldi	r25, 0x43	; 67
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
     350:	8d e4       	ldi	r24, 0x4D	; 77
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	93 83       	std	Z+3, r25	; 0x03
		lcd_write_string(str);  // finally writing it...
     356:	82 83       	std	Z+2, r24	; 0x02
     358:	c8 01       	movw	r24, r16
     35a:	5f d1       	rcall	.+702    	; 0x61a <lcd_write_string>
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
	}
	
	if (display_state == MILLIMETER){
     368:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	71 f5       	brne	.+92     	; 0x3cc <writeDistanceToLCD+0xe0>
		int distanceInMM = (distance / 29.7); // Calculating to MM instead of CM
     370:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <distance>
     374:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <distance+0x1>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	35 d2       	rcall	.+1130   	; 0x7e8 <__floatunsisf>
     37e:	2a e9       	ldi	r18, 0x9A	; 154
     380:	39 e9       	ldi	r19, 0x99	; 153
     382:	4d ee       	ldi	r20, 0xED	; 237
     384:	51 e4       	ldi	r21, 0x41	; 65
     386:	97 d1       	rcall	.+814    	; 0x6b6 <__divsf3>
     388:	fe d1       	rcall	.+1020   	; 0x786 <__fixsfsi>
		int distanceInMMInt = (int)distanceInMM; // convert distance float to distance int
		sprintf(str, "%d", distanceInMMInt); // converting the distance in cm integer to a string
     38a:	7f 93       	push	r23
     38c:	6f 93       	push	r22
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	8e 01       	movw	r16, r28
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	1f 93       	push	r17
     39e:	0f 93       	push	r16
     3a0:	99 d3       	rcall	.+1842   	; 0xad4 <sprintf>
		strcat(str, " MM"); // adding text after the string
     3a2:	f8 01       	movw	r30, r16
     3a4:	01 90       	ld	r0, Z+
     3a6:	00 20       	and	r0, r0
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <writeDistanceToLCD+0xb8>
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	80 e2       	ldi	r24, 0x20	; 32
     3ae:	9d e4       	ldi	r25, 0x4D	; 77
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	8d e4       	ldi	r24, 0x4D	; 77
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	93 83       	std	Z+3, r25	; 0x03
		lcd_write_string(str); // finally writing it...
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	c8 01       	movw	r24, r16
     3be:	2d d1       	rcall	.+602    	; 0x61a <lcd_write_string>
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
	}
	
	if (display_state == INCHES){
     3cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	79 f5       	brne	.+94     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		int distanceInInches = round(distanceInCM * 0.3937);
     3d4:	2c e0       	ldi	r18, 0x0C	; 12
     3d6:	33 e9       	ldi	r19, 0x93	; 147
     3d8:	49 ec       	ldi	r20, 0xC9	; 201
     3da:	5e e3       	ldi	r21, 0x3E	; 62
     3dc:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <distanceInCM>
     3e0:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <distanceInCM+0x1>
     3e4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <distanceInCM+0x2>
     3e8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <distanceInCM+0x3>
     3ec:	b3 d2       	rcall	.+1382   	; 0x954 <__mulsf3>
     3ee:	15 d3       	rcall	.+1578   	; 0xa1a <round>
     3f0:	ca d1       	rcall	.+916    	; 0x786 <__fixsfsi>
		int distanceInInchesInt = (int)distanceInInches; // convert distance float to distance int
		sprintf(str, "%d", distanceInInchesInt); // converting the distance in cm integer to a string
     3f2:	7f 93       	push	r23
     3f4:	6f 93       	push	r22
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	1f 93       	push	r17
     406:	0f 93       	push	r16
     408:	65 d3       	rcall	.+1738   	; 0xad4 <sprintf>
		strcat(str, " INCHES"); // adding text after the string
     40a:	d8 01       	movw	r26, r16
     40c:	0d 90       	ld	r0, X+
     40e:	00 20       	and	r0, r0
     410:	e9 f7       	brne	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     412:	11 97       	sbiw	r26, 0x01	; 1
     414:	88 e0       	ldi	r24, 0x08	; 8
     416:	e8 e0       	ldi	r30, 0x08	; 8
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	8a 95       	dec	r24
     420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		lcd_write_string(str); // finally writing it...
     422:	c8 01       	movw	r24, r16
     424:	fa d0       	rcall	.+500    	; 0x61a <lcd_write_string>
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
	}
	
	if (display_state == RICEGRAIN){
     432:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     436:	83 30       	cpi	r24, 0x03	; 3
		int distanceInGR = ((distance / 29.7) / 5); // Calculating to MM instead of CM, 1 grain of rice is 5mm so /5
     438:	91 f5       	brne	.+100    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     43a:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <distance>
     43e:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <distance+0x1>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	d0 d1       	rcall	.+928    	; 0x7e8 <__floatunsisf>
     448:	2a e9       	ldi	r18, 0x9A	; 154
     44a:	39 e9       	ldi	r19, 0x99	; 153
     44c:	4d ee       	ldi	r20, 0xED	; 237
     44e:	51 e4       	ldi	r21, 0x41	; 65
     450:	32 d1       	rcall	.+612    	; 0x6b6 <__divsf3>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 ea       	ldi	r20, 0xA0	; 160
     458:	50 e4       	ldi	r21, 0x40	; 64
     45a:	2d d1       	rcall	.+602    	; 0x6b6 <__divsf3>
     45c:	94 d1       	rcall	.+808    	; 0x786 <__fixsfsi>
		int distanceInGRInt = (int)distanceInGR; // convert distance float to distance int
		sprintf(str, "%d", distanceInGRInt); // converting the distance in cm integer to a string
     45e:	7f 93       	push	r23
     460:	6f 93       	push	r22
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	9f 93       	push	r25
     468:	8f 93       	push	r24
     46a:	8e 01       	movw	r16, r28
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	1f 93       	push	r17
     472:	0f 93       	push	r16
     474:	2f d3       	rcall	.+1630   	; 0xad4 <sprintf>
		strcat(str, " Grains"); // adding text after the string
     476:	d8 01       	movw	r26, r16
     478:	0d 90       	ld	r0, X+
     47a:	00 20       	and	r0, r0
     47c:	e9 f7       	brne	.-6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     47e:	11 97       	sbiw	r26, 0x01	; 1
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	e0 e1       	ldi	r30, 0x10	; 16
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
		lcd_write_string(str); // finally writing it...
     48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	c8 01       	movw	r24, r16
     490:	c4 d0       	rcall	.+392    	; 0x61a <lcd_write_string>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
	}
	
	wait_ms(5000);
     49e:	88 e8       	ldi	r24, 0x88	; 136
     4a0:	93 e1       	ldi	r25, 0x13	; 19
     4a2:	ec d0       	rcall	.+472    	; 0x67c <wait_ms>
     4a4:	2a 96       	adiw	r28, 0x0a	; 10
}
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <__vector_1>:
     4ba:	1f 92       	push	r1

ISR(INT0_vect) 
{
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
		// INTERRUPT OP PD0 AANGEROEPEN
		if (interrupt_state == INTERRUPT_RISING) // ALS DE INTERRUPT GEGENEREERD WERD DOOR EEN RISING EDGE
     4c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <__vector_1+0x26>
		{
		EICRA = 0x02; // DAN WILLEN WE NU DAT ER EEN INTERRUPT GEGENEREERD WORDT BIJ EEN FALLING EDGE (PD0)
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		TCNT1 = 0x00; // RESET DE TIJD VAN TIMER1
     4d6:	1d bc       	out	0x2d, r1	; 45
     4d8:	1c bc       	out	0x2c, r1	; 44
		interrupt_state = INTERRUPT_FALLING; // INTERRUPT STATUS WORDT DUS FALLING, DOOR EICRA = 0x02; 
     4da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     4de:	0c c0       	rjmp	.+24     	; 0x4f8 <__vector_1+0x3e>
		} 
		
		
		else // ALS DE INTERRUPT NIET GEGENEREERD WERD DOOR EEN RISING, WAS HET WEL EEN FALLING EDGE (HET EINDE VAN DE ECHO DUS)
		{
		EICRA = 0x03; // NU WILLEN WE WEER DAT DE INTERRUPT GEGENEREERD WORDT BIJ EEN RISING EDGE (PD0)
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		timer_dist = TCNT1; // TIJD INLEZEN NAAR VARIABEL timer_dist
     4e6:	8c b5       	in	r24, 0x2c	; 44
     4e8:	9d b5       	in	r25, 0x2d	; 45
     4ea:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer_dist+0x1>
     4ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer_dist>
		interrupt_state = INTERRUPT_RISING; // INTERRUPT STATUS WORDT DUS RISING, DOOR EICRA = 0x03; 
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
}
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <main>:



int main( void )
{
	configurePins();
     506:	c9 d0       	rcall	.+402    	; 0x69a <configurePins>
	
	EICRA = 0x03; // interrupt PORTD on pin 0, rising edge
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK |= 0x01; // enable interrupt on pin 0 (INT0) , When set to '1' then the External Interrupt feature is enabled.
     50e:	89 b7       	in	r24, 0x39	; 57
     510:	81 60       	ori	r24, 0x01	; 1
     512:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0b00000000; // initialize timer1, prescaler=256
     514:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // CTC compare A, RUN
     516:	8c e0       	ldi	r24, 0x0C	; 12
     518:	8e bd       	out	0x2e, r24	; 46
	//TCCR1A and TCCR1B are different registers, but they work on the same timer, timer1. 
	//They configure different behavior and are located in separate registers, simply because all the bits don't fit in a single byte.
	sei(); // sei sets the bit and switches interrupts on
	
	
	init_4bits_mode(); // LCD Init 4 bit mode
     51a:	78 94       	sei
     51c:	56 d0       	rcall	.+172    	; 0x5ca <init_4bits_mode>
	lcd_write_string("Starting US....");
     51e:	88 e1       	ldi	r24, 0x18	; 24
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	7b d0       	rcall	.+246    	; 0x61a <lcd_write_string>
	wait_ms (3000);
     524:	88 eb       	ldi	r24, 0xB8	; 184
     526:	9b e0       	ldi	r25, 0x0B	; 11
     528:	a9 d0       	rcall	.+338    	; 0x67c <wait_ms>
	
	
	
	while (1)
	{
		sendUSPulse();
     52a:	ce dd       	rcall	.-1124   	; 0xc8 <sendUSPulse>
     52c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer_dist>
		distance = timer_dist * (340 / 2 );
     530:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer_dist+0x1>
     534:	2a ea       	ldi	r18, 0xAA	; 170
     536:	28 9f       	mul	r18, r24
     538:	e0 01       	movw	r28, r0
     53a:	29 9f       	mul	r18, r25
     53c:	d0 0d       	add	r29, r0
     53e:	11 24       	eor	r1, r1
     540:	d0 93 2a 01 	sts	0x012A, r29	; 0x80012a <distance+0x1>
     544:	c0 93 29 01 	sts	0x0129, r28	; 0x800129 <distance>
		
		//my measurements: 18cm is 5400, 8 cm is 2380
		//which means 1cm is around 297, so we divide by it
		
		distanceInCM = round(distance / 297);
     548:	ce 01       	movw	r24, r28
     54a:	69 e2       	ldi	r22, 0x29	; 41
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	ae d2       	rcall	.+1372   	; 0xaac <__udivmodhi4>
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	49 d1       	rcall	.+658    	; 0x7e8 <__floatunsisf>
     556:	61 d2       	rcall	.+1218   	; 0xa1a <round>
     558:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <distanceInCM>
     55c:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <distanceInCM+0x1>
     560:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <distanceInCM+0x2>
     564:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <distanceInCM+0x3>
		if (distance > 0) {		
     568:	cd 2b       	or	r28, r29
			writeDistanceToLCD();
     56a:	11 f0       	breq	.+4      	; 0x570 <main+0x6a>
     56c:	bf de       	rcall	.-642    	; 0x2ec <writeDistanceToLCD>
			writeDistanceToLEDS();
     56e:	d3 dd       	rcall	.-1114   	; 0x116 <writeDistanceToLEDS>
     570:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		}
		
		if ( (PING & (1 << PING0)) == (1 << PING0) ) { // IF PING0 is pressed.
     574:	80 ff       	sbrs	r24, 0
     576:	14 c0       	rjmp	.+40     	; 0x5a0 <main+0x9a>
     578:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <displaycounter>
			// pin is high
			displaycounter = displaycounter + 1;
     57c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <displaycounter+0x1>
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <displaycounter+0x1>
     586:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <displaycounter>
     58a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <displaycounterMax>
			if ( displaycounter > displaycounterMax ) {
     58e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <displaycounterMax+0x1>
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	24 f4       	brge	.+8      	; 0x5a0 <main+0x9a>
				displaycounter = 0;
     598:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <displaycounter+0x1>
     59c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <displaycounter>
			}
			
			} else {
			// pin is low
		}
		setDisplayState();
     5a0:	9a dd       	rcall	.-1228   	; 0xd6 <setDisplayState>
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <main+0x24>

000005a4 <lcd_strobe_lcd_e>:
		

	}
     5a4:	85 b3       	in	r24, 0x15	; 21
void lcd_write_integer(int givenint){
	char str[10];
	sprintf(str, "%d", givenint);
	// print our string
	lcd_write_string(str);
}
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	85 bb       	out	0x15, r24	; 21
     5aa:	89 ef       	ldi	r24, 0xF9	; 249
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <lcd_strobe_lcd_e+0xa>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <lcd_strobe_lcd_e+0x10>
     5b4:	00 00       	nop
     5b6:	85 b3       	in	r24, 0x15	; 21
     5b8:	87 7f       	andi	r24, 0xF7	; 247
     5ba:	85 bb       	out	0x15, r24	; 21
     5bc:	89 ef       	ldi	r24, 0xF9	; 249
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_strobe_lcd_e+0x1c>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd_strobe_lcd_e+0x22>
     5c6:	00 00       	nop
     5c8:	08 95       	ret

000005ca <init_4bits_mode>:
     5ca:	cf 93       	push	r28
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	84 bb       	out	0x14, r24	; 20
     5d0:	15 ba       	out	0x15, r1	; 21
     5d2:	c0 e2       	ldi	r28, 0x20	; 32
     5d4:	c5 bb       	out	0x15, r28	; 21
     5d6:	e6 df       	rcall	.-52     	; 0x5a4 <lcd_strobe_lcd_e>
     5d8:	c5 bb       	out	0x15, r28	; 21
     5da:	e4 df       	rcall	.-56     	; 0x5a4 <lcd_strobe_lcd_e>
     5dc:	80 e8       	ldi	r24, 0x80	; 128
     5de:	85 bb       	out	0x15, r24	; 21
     5e0:	e1 df       	rcall	.-62     	; 0x5a4 <lcd_strobe_lcd_e>
     5e2:	15 ba       	out	0x15, r1	; 21
     5e4:	df df       	rcall	.-66     	; 0x5a4 <lcd_strobe_lcd_e>
     5e6:	80 ef       	ldi	r24, 0xF0	; 240
     5e8:	85 bb       	out	0x15, r24	; 21
     5ea:	dc df       	rcall	.-72     	; 0x5a4 <lcd_strobe_lcd_e>
     5ec:	15 ba       	out	0x15, r1	; 21
     5ee:	da df       	rcall	.-76     	; 0x5a4 <lcd_strobe_lcd_e>
     5f0:	80 e6       	ldi	r24, 0x60	; 96
     5f2:	85 bb       	out	0x15, r24	; 21
     5f4:	d7 df       	rcall	.-82     	; 0x5a4 <lcd_strobe_lcd_e>
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <lcd_write_data>:
     5fa:	cf 93       	push	r28
     5fc:	c8 2f       	mov	r28, r24
     5fe:	85 bb       	out	0x15, r24	; 21
     600:	85 b3       	in	r24, 0x15	; 21
     602:	84 60       	ori	r24, 0x04	; 4
     604:	85 bb       	out	0x15, r24	; 21
     606:	ce df       	rcall	.-100    	; 0x5a4 <lcd_strobe_lcd_e>
     608:	c2 95       	swap	r28
     60a:	c0 7f       	andi	r28, 0xF0	; 240
     60c:	c5 bb       	out	0x15, r28	; 21
     60e:	85 b3       	in	r24, 0x15	; 21
     610:	84 60       	ori	r24, 0x04	; 4
     612:	85 bb       	out	0x15, r24	; 21
     614:	c7 df       	rcall	.-114    	; 0x5a4 <lcd_strobe_lcd_e>
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <lcd_write_string>:
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
     620:	02 c0       	rjmp	.+4      	; 0x626 <lcd_write_string+0xc>
     622:	eb df       	rcall	.-42     	; 0x5fa <lcd_write_data>
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	88 81       	ld	r24, Y
     628:	81 11       	cpse	r24, r1
     62a:	fb cf       	rjmp	.-10     	; 0x622 <lcd_write_string+0x8>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     636:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
     638:	85 b3       	in	r24, 0x15	; 21
     63a:	8b 7f       	andi	r24, 0xFB	; 251
     63c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
     63e:	b2 df       	rcall	.-156    	; 0x5a4 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
     640:	c2 95       	swap	r28
     642:	c0 7f       	andi	r28, 0xF0	; 240
     644:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
     646:	85 b3       	in	r24, 0x15	; 21
     648:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e();
     64a:	85 bb       	out	0x15, r24	; 21
     64c:	ab df       	rcall	.-170    	; 0x5a4 <lcd_strobe_lcd_e>
}
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <lcd_clear>:

void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	ee df       	rcall	.-36     	; 0x632 <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     656:	83 ef       	ldi	r24, 0xF3	; 243
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <lcd_clear+0x8>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <lcd_clear+0xe>
     660:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	e6 cf       	rjmp	.-52     	; 0x632 <lcd_write_command>
     666:	08 95       	ret

00000668 <wait_us>:
#include "Tools.h"
#include <util/delay.h>

void wait_us(unsigned int us)
{
	for(int i = 0; i < us; i++)
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	03 c0       	rjmp	.+6      	; 0x674 <wait_us+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66e:	00 00       	nop
     670:	2f 5f       	subi	r18, 0xFF	; 255
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	d0 f3       	brcs	.-12     	; 0x66e <wait_us+0x6>
	{
		_delay_us(1);
	}
}
     67a:	08 95       	ret

0000067c <wait_ms>:

void wait_ms(unsigned int ms)
{
	
	for(int i = 0; i < ms; i++)
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	08 c0       	rjmp	.+16     	; 0x692 <wait_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     682:	e9 ef       	ldi	r30, 0xF9	; 249
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <wait_ms+0xa>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <wait_ms+0x10>
     68c:	00 00       	nop
     68e:	2f 5f       	subi	r18, 0xFF	; 255
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	a8 f3       	brcs	.-22     	; 0x682 <wait_ms+0x6>
	{
		_delay_ms(1);
	}
}
     698:	08 95       	ret

0000069a <configurePins>:

void configurePins(){
	DDRA = 0b11111111;	// All pins PORTA are set to output (displaying us values)
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; //	Put DDRB on output. Trigger is in B0 in our case.
     69e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; //	port D pin 0 on input. 0 is echo and also interrupt
     6a0:	11 ba       	out	0x11, r1	; 17
	DDRG &= ~(1 << PING0); // Setting PING0 bit in data direction, also called input
     6a2:	e4 e6       	ldi	r30, 0x64	; 100
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8e 7f       	andi	r24, 0xFE	; 254
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <__cmpsf2>:
     6ae:	d9 d0       	rcall	.+434    	; 0x862 <__fp_cmp>
     6b0:	08 f4       	brcc	.+2      	; 0x6b4 <__cmpsf2+0x6>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	08 95       	ret

000006b6 <__divsf3>:
     6b6:	0c d0       	rcall	.+24     	; 0x6d0 <__divsf3x>
     6b8:	0f c1       	rjmp	.+542    	; 0x8d8 <__fp_round>
     6ba:	07 d1       	rcall	.+526    	; 0x8ca <__fp_pscB>
     6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0x18>
     6be:	fe d0       	rcall	.+508    	; 0x8bc <__fp_pscA>
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <__divsf3+0x18>
     6c2:	21 f4       	brne	.+8      	; 0x6cc <__divsf3+0x16>
     6c4:	5f 3f       	cpi	r21, 0xFF	; 255
     6c6:	19 f0       	breq	.+6      	; 0x6ce <__divsf3+0x18>
     6c8:	f0 c0       	rjmp	.+480    	; 0x8aa <__fp_inf>
     6ca:	51 11       	cpse	r21, r1
     6cc:	39 c1       	rjmp	.+626    	; 0x940 <__fp_szero>
     6ce:	f3 c0       	rjmp	.+486    	; 0x8b6 <__fp_nan>

000006d0 <__divsf3x>:
     6d0:	14 d1       	rcall	.+552    	; 0x8fa <__fp_split3>
     6d2:	98 f3       	brcs	.-26     	; 0x6ba <__divsf3+0x4>

000006d4 <__divsf3_pse>:
     6d4:	99 23       	and	r25, r25
     6d6:	c9 f3       	breq	.-14     	; 0x6ca <__divsf3+0x14>
     6d8:	55 23       	and	r21, r21
     6da:	b1 f3       	breq	.-20     	; 0x6c8 <__divsf3+0x12>
     6dc:	95 1b       	sub	r25, r21
     6de:	55 0b       	sbc	r21, r21
     6e0:	bb 27       	eor	r27, r27
     6e2:	aa 27       	eor	r26, r26
     6e4:	62 17       	cp	r22, r18
     6e6:	73 07       	cpc	r23, r19
     6e8:	84 07       	cpc	r24, r20
     6ea:	38 f0       	brcs	.+14     	; 0x6fa <__divsf3_pse+0x26>
     6ec:	9f 5f       	subi	r25, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	44 1f       	adc	r20, r20
     6f6:	aa 1f       	adc	r26, r26
     6f8:	a9 f3       	breq	.-22     	; 0x6e4 <__divsf3_pse+0x10>
     6fa:	33 d0       	rcall	.+102    	; 0x762 <__divsf3_pse+0x8e>
     6fc:	0e 2e       	mov	r0, r30
     6fe:	3a f0       	brmi	.+14     	; 0x70e <__divsf3_pse+0x3a>
     700:	e0 e8       	ldi	r30, 0x80	; 128
     702:	30 d0       	rcall	.+96     	; 0x764 <__divsf3_pse+0x90>
     704:	91 50       	subi	r25, 0x01	; 1
     706:	50 40       	sbci	r21, 0x00	; 0
     708:	e6 95       	lsr	r30
     70a:	00 1c       	adc	r0, r0
     70c:	ca f7       	brpl	.-14     	; 0x700 <__divsf3_pse+0x2c>
     70e:	29 d0       	rcall	.+82     	; 0x762 <__divsf3_pse+0x8e>
     710:	fe 2f       	mov	r31, r30
     712:	27 d0       	rcall	.+78     	; 0x762 <__divsf3_pse+0x8e>
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	88 1f       	adc	r24, r24
     71a:	bb 1f       	adc	r27, r27
     71c:	26 17       	cp	r18, r22
     71e:	37 07       	cpc	r19, r23
     720:	48 07       	cpc	r20, r24
     722:	ab 07       	cpc	r26, r27
     724:	b0 e8       	ldi	r27, 0x80	; 128
     726:	09 f0       	breq	.+2      	; 0x72a <__divsf3_pse+0x56>
     728:	bb 0b       	sbc	r27, r27
     72a:	80 2d       	mov	r24, r0
     72c:	bf 01       	movw	r22, r30
     72e:	ff 27       	eor	r31, r31
     730:	93 58       	subi	r25, 0x83	; 131
     732:	5f 4f       	sbci	r21, 0xFF	; 255
     734:	2a f0       	brmi	.+10     	; 0x740 <__divsf3_pse+0x6c>
     736:	9e 3f       	cpi	r25, 0xFE	; 254
     738:	51 05       	cpc	r21, r1
     73a:	68 f0       	brcs	.+26     	; 0x756 <__divsf3_pse+0x82>
     73c:	b6 c0       	rjmp	.+364    	; 0x8aa <__fp_inf>
     73e:	00 c1       	rjmp	.+512    	; 0x940 <__fp_szero>
     740:	5f 3f       	cpi	r21, 0xFF	; 255
     742:	ec f3       	brlt	.-6      	; 0x73e <__divsf3_pse+0x6a>
     744:	98 3e       	cpi	r25, 0xE8	; 232
     746:	dc f3       	brlt	.-10     	; 0x73e <__divsf3_pse+0x6a>
     748:	86 95       	lsr	r24
     74a:	77 95       	ror	r23
     74c:	67 95       	ror	r22
     74e:	b7 95       	ror	r27
     750:	f7 95       	ror	r31
     752:	9f 5f       	subi	r25, 0xFF	; 255
     754:	c9 f7       	brne	.-14     	; 0x748 <__divsf3_pse+0x74>
     756:	88 0f       	add	r24, r24
     758:	91 1d       	adc	r25, r1
     75a:	96 95       	lsr	r25
     75c:	87 95       	ror	r24
     75e:	97 f9       	bld	r25, 7
     760:	08 95       	ret
     762:	e1 e0       	ldi	r30, 0x01	; 1
     764:	66 0f       	add	r22, r22
     766:	77 1f       	adc	r23, r23
     768:	88 1f       	adc	r24, r24
     76a:	bb 1f       	adc	r27, r27
     76c:	62 17       	cp	r22, r18
     76e:	73 07       	cpc	r23, r19
     770:	84 07       	cpc	r24, r20
     772:	ba 07       	cpc	r27, r26
     774:	20 f0       	brcs	.+8      	; 0x77e <__divsf3_pse+0xaa>
     776:	62 1b       	sub	r22, r18
     778:	73 0b       	sbc	r23, r19
     77a:	84 0b       	sbc	r24, r20
     77c:	ba 0b       	sbc	r27, r26
     77e:	ee 1f       	adc	r30, r30
     780:	88 f7       	brcc	.-30     	; 0x764 <__divsf3_pse+0x90>
     782:	e0 95       	com	r30
     784:	08 95       	ret

00000786 <__fixsfsi>:
     786:	04 d0       	rcall	.+8      	; 0x790 <__fixunssfsi>
     788:	68 94       	set
     78a:	b1 11       	cpse	r27, r1
     78c:	d9 c0       	rjmp	.+434    	; 0x940 <__fp_szero>
     78e:	08 95       	ret

00000790 <__fixunssfsi>:
     790:	bc d0       	rcall	.+376    	; 0x90a <__fp_splitA>
     792:	88 f0       	brcs	.+34     	; 0x7b6 <__fixunssfsi+0x26>
     794:	9f 57       	subi	r25, 0x7F	; 127
     796:	90 f0       	brcs	.+36     	; 0x7bc <__fixunssfsi+0x2c>
     798:	b9 2f       	mov	r27, r25
     79a:	99 27       	eor	r25, r25
     79c:	b7 51       	subi	r27, 0x17	; 23
     79e:	a0 f0       	brcs	.+40     	; 0x7c8 <__fixunssfsi+0x38>
     7a0:	d1 f0       	breq	.+52     	; 0x7d6 <__fixunssfsi+0x46>
     7a2:	66 0f       	add	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	88 1f       	adc	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	1a f0       	brmi	.+6      	; 0x7b2 <__fixunssfsi+0x22>
     7ac:	ba 95       	dec	r27
     7ae:	c9 f7       	brne	.-14     	; 0x7a2 <__fixunssfsi+0x12>
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <__fixunssfsi+0x46>
     7b2:	b1 30       	cpi	r27, 0x01	; 1
     7b4:	81 f0       	breq	.+32     	; 0x7d6 <__fixunssfsi+0x46>
     7b6:	c3 d0       	rcall	.+390    	; 0x93e <__fp_zero>
     7b8:	b1 e0       	ldi	r27, 0x01	; 1
     7ba:	08 95       	ret
     7bc:	c0 c0       	rjmp	.+384    	; 0x93e <__fp_zero>
     7be:	67 2f       	mov	r22, r23
     7c0:	78 2f       	mov	r23, r24
     7c2:	88 27       	eor	r24, r24
     7c4:	b8 5f       	subi	r27, 0xF8	; 248
     7c6:	39 f0       	breq	.+14     	; 0x7d6 <__fixunssfsi+0x46>
     7c8:	b9 3f       	cpi	r27, 0xF9	; 249
     7ca:	cc f3       	brlt	.-14     	; 0x7be <__fixunssfsi+0x2e>
     7cc:	86 95       	lsr	r24
     7ce:	77 95       	ror	r23
     7d0:	67 95       	ror	r22
     7d2:	b3 95       	inc	r27
     7d4:	d9 f7       	brne	.-10     	; 0x7cc <__fixunssfsi+0x3c>
     7d6:	3e f4       	brtc	.+14     	; 0x7e6 <__fixunssfsi+0x56>
     7d8:	90 95       	com	r25
     7da:	80 95       	com	r24
     7dc:	70 95       	com	r23
     7de:	61 95       	neg	r22
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	8f 4f       	sbci	r24, 0xFF	; 255
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	08 95       	ret

000007e8 <__floatunsisf>:
     7e8:	e8 94       	clt
     7ea:	09 c0       	rjmp	.+18     	; 0x7fe <__floatsisf+0x12>

000007ec <__floatsisf>:
     7ec:	97 fb       	bst	r25, 7
     7ee:	3e f4       	brtc	.+14     	; 0x7fe <__floatsisf+0x12>
     7f0:	90 95       	com	r25
     7f2:	80 95       	com	r24
     7f4:	70 95       	com	r23
     7f6:	61 95       	neg	r22
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	8f 4f       	sbci	r24, 0xFF	; 255
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	99 23       	and	r25, r25
     800:	a9 f0       	breq	.+42     	; 0x82c <__floatsisf+0x40>
     802:	f9 2f       	mov	r31, r25
     804:	96 e9       	ldi	r25, 0x96	; 150
     806:	bb 27       	eor	r27, r27
     808:	93 95       	inc	r25
     80a:	f6 95       	lsr	r31
     80c:	87 95       	ror	r24
     80e:	77 95       	ror	r23
     810:	67 95       	ror	r22
     812:	b7 95       	ror	r27
     814:	f1 11       	cpse	r31, r1
     816:	f8 cf       	rjmp	.-16     	; 0x808 <__floatsisf+0x1c>
     818:	fa f4       	brpl	.+62     	; 0x858 <__floatsisf+0x6c>
     81a:	bb 0f       	add	r27, r27
     81c:	11 f4       	brne	.+4      	; 0x822 <__floatsisf+0x36>
     81e:	60 ff       	sbrs	r22, 0
     820:	1b c0       	rjmp	.+54     	; 0x858 <__floatsisf+0x6c>
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	8f 4f       	sbci	r24, 0xFF	; 255
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	16 c0       	rjmp	.+44     	; 0x858 <__floatsisf+0x6c>
     82c:	88 23       	and	r24, r24
     82e:	11 f0       	breq	.+4      	; 0x834 <__floatsisf+0x48>
     830:	96 e9       	ldi	r25, 0x96	; 150
     832:	11 c0       	rjmp	.+34     	; 0x856 <__floatsisf+0x6a>
     834:	77 23       	and	r23, r23
     836:	21 f0       	breq	.+8      	; 0x840 <__floatsisf+0x54>
     838:	9e e8       	ldi	r25, 0x8E	; 142
     83a:	87 2f       	mov	r24, r23
     83c:	76 2f       	mov	r23, r22
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__floatsisf+0x5e>
     840:	66 23       	and	r22, r22
     842:	71 f0       	breq	.+28     	; 0x860 <__floatsisf+0x74>
     844:	96 e8       	ldi	r25, 0x86	; 134
     846:	86 2f       	mov	r24, r22
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	2a f0       	brmi	.+10     	; 0x858 <__floatsisf+0x6c>
     84e:	9a 95       	dec	r25
     850:	66 0f       	add	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	88 1f       	adc	r24, r24
     856:	da f7       	brpl	.-10     	; 0x84e <__floatsisf+0x62>
     858:	88 0f       	add	r24, r24
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	97 f9       	bld	r25, 7
     860:	08 95       	ret

00000862 <__fp_cmp>:
     862:	99 0f       	add	r25, r25
     864:	00 08       	sbc	r0, r0
     866:	55 0f       	add	r21, r21
     868:	aa 0b       	sbc	r26, r26
     86a:	e0 e8       	ldi	r30, 0x80	; 128
     86c:	fe ef       	ldi	r31, 0xFE	; 254
     86e:	16 16       	cp	r1, r22
     870:	17 06       	cpc	r1, r23
     872:	e8 07       	cpc	r30, r24
     874:	f9 07       	cpc	r31, r25
     876:	c0 f0       	brcs	.+48     	; 0x8a8 <__fp_cmp+0x46>
     878:	12 16       	cp	r1, r18
     87a:	13 06       	cpc	r1, r19
     87c:	e4 07       	cpc	r30, r20
     87e:	f5 07       	cpc	r31, r21
     880:	98 f0       	brcs	.+38     	; 0x8a8 <__fp_cmp+0x46>
     882:	62 1b       	sub	r22, r18
     884:	73 0b       	sbc	r23, r19
     886:	84 0b       	sbc	r24, r20
     888:	95 0b       	sbc	r25, r21
     88a:	39 f4       	brne	.+14     	; 0x89a <__fp_cmp+0x38>
     88c:	0a 26       	eor	r0, r26
     88e:	61 f0       	breq	.+24     	; 0x8a8 <__fp_cmp+0x46>
     890:	23 2b       	or	r18, r19
     892:	24 2b       	or	r18, r20
     894:	25 2b       	or	r18, r21
     896:	21 f4       	brne	.+8      	; 0x8a0 <__fp_cmp+0x3e>
     898:	08 95       	ret
     89a:	0a 26       	eor	r0, r26
     89c:	09 f4       	brne	.+2      	; 0x8a0 <__fp_cmp+0x3e>
     89e:	a1 40       	sbci	r26, 0x01	; 1
     8a0:	a6 95       	lsr	r26
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	81 1d       	adc	r24, r1
     8a6:	81 1d       	adc	r24, r1
     8a8:	08 95       	ret

000008aa <__fp_inf>:
     8aa:	97 f9       	bld	r25, 7
     8ac:	9f 67       	ori	r25, 0x7F	; 127
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	08 95       	ret

000008b6 <__fp_nan>:
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	80 ec       	ldi	r24, 0xC0	; 192
     8ba:	08 95       	ret

000008bc <__fp_pscA>:
     8bc:	00 24       	eor	r0, r0
     8be:	0a 94       	dec	r0
     8c0:	16 16       	cp	r1, r22
     8c2:	17 06       	cpc	r1, r23
     8c4:	18 06       	cpc	r1, r24
     8c6:	09 06       	cpc	r0, r25
     8c8:	08 95       	ret

000008ca <__fp_pscB>:
     8ca:	00 24       	eor	r0, r0
     8cc:	0a 94       	dec	r0
     8ce:	12 16       	cp	r1, r18
     8d0:	13 06       	cpc	r1, r19
     8d2:	14 06       	cpc	r1, r20
     8d4:	05 06       	cpc	r0, r21
     8d6:	08 95       	ret

000008d8 <__fp_round>:
     8d8:	09 2e       	mov	r0, r25
     8da:	03 94       	inc	r0
     8dc:	00 0c       	add	r0, r0
     8de:	11 f4       	brne	.+4      	; 0x8e4 <__fp_round+0xc>
     8e0:	88 23       	and	r24, r24
     8e2:	52 f0       	brmi	.+20     	; 0x8f8 <__fp_round+0x20>
     8e4:	bb 0f       	add	r27, r27
     8e6:	40 f4       	brcc	.+16     	; 0x8f8 <__fp_round+0x20>
     8e8:	bf 2b       	or	r27, r31
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <__fp_round+0x18>
     8ec:	60 ff       	sbrs	r22, 0
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <__fp_round+0x20>
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	8f 4f       	sbci	r24, 0xFF	; 255
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	08 95       	ret

000008fa <__fp_split3>:
     8fa:	57 fd       	sbrc	r21, 7
     8fc:	90 58       	subi	r25, 0x80	; 128
     8fe:	44 0f       	add	r20, r20
     900:	55 1f       	adc	r21, r21
     902:	59 f0       	breq	.+22     	; 0x91a <__fp_splitA+0x10>
     904:	5f 3f       	cpi	r21, 0xFF	; 255
     906:	71 f0       	breq	.+28     	; 0x924 <__fp_splitA+0x1a>
     908:	47 95       	ror	r20

0000090a <__fp_splitA>:
     90a:	88 0f       	add	r24, r24
     90c:	97 fb       	bst	r25, 7
     90e:	99 1f       	adc	r25, r25
     910:	61 f0       	breq	.+24     	; 0x92a <__fp_splitA+0x20>
     912:	9f 3f       	cpi	r25, 0xFF	; 255
     914:	79 f0       	breq	.+30     	; 0x934 <__fp_splitA+0x2a>
     916:	87 95       	ror	r24
     918:	08 95       	ret
     91a:	12 16       	cp	r1, r18
     91c:	13 06       	cpc	r1, r19
     91e:	14 06       	cpc	r1, r20
     920:	55 1f       	adc	r21, r21
     922:	f2 cf       	rjmp	.-28     	; 0x908 <__fp_split3+0xe>
     924:	46 95       	lsr	r20
     926:	f1 df       	rcall	.-30     	; 0x90a <__fp_splitA>
     928:	08 c0       	rjmp	.+16     	; 0x93a <__fp_splitA+0x30>
     92a:	16 16       	cp	r1, r22
     92c:	17 06       	cpc	r1, r23
     92e:	18 06       	cpc	r1, r24
     930:	99 1f       	adc	r25, r25
     932:	f1 cf       	rjmp	.-30     	; 0x916 <__fp_splitA+0xc>
     934:	86 95       	lsr	r24
     936:	71 05       	cpc	r23, r1
     938:	61 05       	cpc	r22, r1
     93a:	08 94       	sec
     93c:	08 95       	ret

0000093e <__fp_zero>:
     93e:	e8 94       	clt

00000940 <__fp_szero>:
     940:	bb 27       	eor	r27, r27
     942:	66 27       	eor	r22, r22
     944:	77 27       	eor	r23, r23
     946:	cb 01       	movw	r24, r22
     948:	97 f9       	bld	r25, 7
     94a:	08 95       	ret

0000094c <__gesf2>:
     94c:	8a df       	rcall	.-236    	; 0x862 <__fp_cmp>
     94e:	08 f4       	brcc	.+2      	; 0x952 <__gesf2+0x6>
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	08 95       	ret

00000954 <__mulsf3>:
     954:	0b d0       	rcall	.+22     	; 0x96c <__mulsf3x>
     956:	c0 cf       	rjmp	.-128    	; 0x8d8 <__fp_round>
     958:	b1 df       	rcall	.-158    	; 0x8bc <__fp_pscA>
     95a:	28 f0       	brcs	.+10     	; 0x966 <__mulsf3+0x12>
     95c:	b6 df       	rcall	.-148    	; 0x8ca <__fp_pscB>
     95e:	18 f0       	brcs	.+6      	; 0x966 <__mulsf3+0x12>
     960:	95 23       	and	r25, r21
     962:	09 f0       	breq	.+2      	; 0x966 <__mulsf3+0x12>
     964:	a2 cf       	rjmp	.-188    	; 0x8aa <__fp_inf>
     966:	a7 cf       	rjmp	.-178    	; 0x8b6 <__fp_nan>
     968:	11 24       	eor	r1, r1
     96a:	ea cf       	rjmp	.-44     	; 0x940 <__fp_szero>

0000096c <__mulsf3x>:
     96c:	c6 df       	rcall	.-116    	; 0x8fa <__fp_split3>
     96e:	a0 f3       	brcs	.-24     	; 0x958 <__mulsf3+0x4>

00000970 <__mulsf3_pse>:
     970:	95 9f       	mul	r25, r21
     972:	d1 f3       	breq	.-12     	; 0x968 <__mulsf3+0x14>
     974:	95 0f       	add	r25, r21
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	55 1f       	adc	r21, r21
     97a:	62 9f       	mul	r22, r18
     97c:	f0 01       	movw	r30, r0
     97e:	72 9f       	mul	r23, r18
     980:	bb 27       	eor	r27, r27
     982:	f0 0d       	add	r31, r0
     984:	b1 1d       	adc	r27, r1
     986:	63 9f       	mul	r22, r19
     988:	aa 27       	eor	r26, r26
     98a:	f0 0d       	add	r31, r0
     98c:	b1 1d       	adc	r27, r1
     98e:	aa 1f       	adc	r26, r26
     990:	64 9f       	mul	r22, r20
     992:	66 27       	eor	r22, r22
     994:	b0 0d       	add	r27, r0
     996:	a1 1d       	adc	r26, r1
     998:	66 1f       	adc	r22, r22
     99a:	82 9f       	mul	r24, r18
     99c:	22 27       	eor	r18, r18
     99e:	b0 0d       	add	r27, r0
     9a0:	a1 1d       	adc	r26, r1
     9a2:	62 1f       	adc	r22, r18
     9a4:	73 9f       	mul	r23, r19
     9a6:	b0 0d       	add	r27, r0
     9a8:	a1 1d       	adc	r26, r1
     9aa:	62 1f       	adc	r22, r18
     9ac:	83 9f       	mul	r24, r19
     9ae:	a0 0d       	add	r26, r0
     9b0:	61 1d       	adc	r22, r1
     9b2:	22 1f       	adc	r18, r18
     9b4:	74 9f       	mul	r23, r20
     9b6:	33 27       	eor	r19, r19
     9b8:	a0 0d       	add	r26, r0
     9ba:	61 1d       	adc	r22, r1
     9bc:	23 1f       	adc	r18, r19
     9be:	84 9f       	mul	r24, r20
     9c0:	60 0d       	add	r22, r0
     9c2:	21 1d       	adc	r18, r1
     9c4:	82 2f       	mov	r24, r18
     9c6:	76 2f       	mov	r23, r22
     9c8:	6a 2f       	mov	r22, r26
     9ca:	11 24       	eor	r1, r1
     9cc:	9f 57       	subi	r25, 0x7F	; 127
     9ce:	50 40       	sbci	r21, 0x00	; 0
     9d0:	8a f0       	brmi	.+34     	; 0x9f4 <__mulsf3_pse+0x84>
     9d2:	e1 f0       	breq	.+56     	; 0xa0c <__mulsf3_pse+0x9c>
     9d4:	88 23       	and	r24, r24
     9d6:	4a f0       	brmi	.+18     	; 0x9ea <__mulsf3_pse+0x7a>
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	bb 1f       	adc	r27, r27
     9de:	66 1f       	adc	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	88 1f       	adc	r24, r24
     9e4:	91 50       	subi	r25, 0x01	; 1
     9e6:	50 40       	sbci	r21, 0x00	; 0
     9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__mulsf3_pse+0x64>
     9ea:	9e 3f       	cpi	r25, 0xFE	; 254
     9ec:	51 05       	cpc	r21, r1
     9ee:	70 f0       	brcs	.+28     	; 0xa0c <__mulsf3_pse+0x9c>
     9f0:	5c cf       	rjmp	.-328    	; 0x8aa <__fp_inf>
     9f2:	a6 cf       	rjmp	.-180    	; 0x940 <__fp_szero>
     9f4:	5f 3f       	cpi	r21, 0xFF	; 255
     9f6:	ec f3       	brlt	.-6      	; 0x9f2 <__mulsf3_pse+0x82>
     9f8:	98 3e       	cpi	r25, 0xE8	; 232
     9fa:	dc f3       	brlt	.-10     	; 0x9f2 <__mulsf3_pse+0x82>
     9fc:	86 95       	lsr	r24
     9fe:	77 95       	ror	r23
     a00:	67 95       	ror	r22
     a02:	b7 95       	ror	r27
     a04:	f7 95       	ror	r31
     a06:	e7 95       	ror	r30
     a08:	9f 5f       	subi	r25, 0xFF	; 255
     a0a:	c1 f7       	brne	.-16     	; 0x9fc <__mulsf3_pse+0x8c>
     a0c:	fe 2b       	or	r31, r30
     a0e:	88 0f       	add	r24, r24
     a10:	91 1d       	adc	r25, r1
     a12:	96 95       	lsr	r25
     a14:	87 95       	ror	r24
     a16:	97 f9       	bld	r25, 7
     a18:	08 95       	ret

00000a1a <round>:
     a1a:	77 df       	rcall	.-274    	; 0x90a <__fp_splitA>
     a1c:	e0 f0       	brcs	.+56     	; 0xa56 <round+0x3c>
     a1e:	9e 37       	cpi	r25, 0x7E	; 126
     a20:	d8 f0       	brcs	.+54     	; 0xa58 <round+0x3e>
     a22:	96 39       	cpi	r25, 0x96	; 150
     a24:	b8 f4       	brcc	.+46     	; 0xa54 <round+0x3a>
     a26:	9e 38       	cpi	r25, 0x8E	; 142
     a28:	48 f4       	brcc	.+18     	; 0xa3c <round+0x22>
     a2a:	67 2f       	mov	r22, r23
     a2c:	78 2f       	mov	r23, r24
     a2e:	88 27       	eor	r24, r24
     a30:	98 5f       	subi	r25, 0xF8	; 248
     a32:	f9 cf       	rjmp	.-14     	; 0xa26 <round+0xc>
     a34:	86 95       	lsr	r24
     a36:	77 95       	ror	r23
     a38:	67 95       	ror	r22
     a3a:	93 95       	inc	r25
     a3c:	95 39       	cpi	r25, 0x95	; 149
     a3e:	d0 f3       	brcs	.-12     	; 0xa34 <round+0x1a>
     a40:	b6 2f       	mov	r27, r22
     a42:	b1 70       	andi	r27, 0x01	; 1
     a44:	6b 0f       	add	r22, r27
     a46:	71 1d       	adc	r23, r1
     a48:	81 1d       	adc	r24, r1
     a4a:	20 f4       	brcc	.+8      	; 0xa54 <round+0x3a>
     a4c:	87 95       	ror	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	93 95       	inc	r25
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <__fp_mintl>
     a56:	1c c0       	rjmp	.+56     	; 0xa90 <__fp_mpack>
     a58:	73 cf       	rjmp	.-282    	; 0x940 <__fp_szero>

00000a5a <__fp_mintl>:
     a5a:	88 23       	and	r24, r24
     a5c:	71 f4       	brne	.+28     	; 0xa7a <__fp_mintl+0x20>
     a5e:	77 23       	and	r23, r23
     a60:	21 f0       	breq	.+8      	; 0xa6a <__fp_mintl+0x10>
     a62:	98 50       	subi	r25, 0x08	; 8
     a64:	87 2b       	or	r24, r23
     a66:	76 2f       	mov	r23, r22
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <__fp_mintl+0x1e>
     a6a:	66 23       	and	r22, r22
     a6c:	11 f4       	brne	.+4      	; 0xa72 <__fp_mintl+0x18>
     a6e:	99 27       	eor	r25, r25
     a70:	0d c0       	rjmp	.+26     	; 0xa8c <__fp_mintl+0x32>
     a72:	90 51       	subi	r25, 0x10	; 16
     a74:	86 2b       	or	r24, r22
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	2a f0       	brmi	.+10     	; 0xa86 <__fp_mintl+0x2c>
     a7c:	9a 95       	dec	r25
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	da f7       	brpl	.-10     	; 0xa7c <__fp_mintl+0x22>
     a86:	88 0f       	add	r24, r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	97 f9       	bld	r25, 7
     a8e:	08 95       	ret

00000a90 <__fp_mpack>:
     a90:	9f 3f       	cpi	r25, 0xFF	; 255
     a92:	31 f0       	breq	.+12     	; 0xaa0 <__fp_mpack_finite+0xc>

00000a94 <__fp_mpack_finite>:
     a94:	91 50       	subi	r25, 0x01	; 1
     a96:	20 f4       	brcc	.+8      	; 0xaa0 <__fp_mpack_finite+0xc>
     a98:	87 95       	ror	r24
     a9a:	77 95       	ror	r23
     a9c:	67 95       	ror	r22
     a9e:	b7 95       	ror	r27
     aa0:	88 0f       	add	r24, r24
     aa2:	91 1d       	adc	r25, r1
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <__udivmodhi4>:
     aac:	aa 1b       	sub	r26, r26
     aae:	bb 1b       	sub	r27, r27
     ab0:	51 e1       	ldi	r21, 0x11	; 17
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <__udivmodhi4_ep>

00000ab4 <__udivmodhi4_loop>:
     ab4:	aa 1f       	adc	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	a6 17       	cp	r26, r22
     aba:	b7 07       	cpc	r27, r23
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__udivmodhi4_ep>
     abe:	a6 1b       	sub	r26, r22
     ac0:	b7 0b       	sbc	r27, r23

00000ac2 <__udivmodhi4_ep>:
     ac2:	88 1f       	adc	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	5a 95       	dec	r21
     ac8:	a9 f7       	brne	.-22     	; 0xab4 <__udivmodhi4_loop>
     aca:	80 95       	com	r24
     acc:	90 95       	com	r25
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	08 95       	ret

00000ad4 <sprintf>:
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	2e 97       	sbiw	r28, 0x0e	; 14
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	0d 89       	ldd	r16, Y+21	; 0x15
     aee:	1e 89       	ldd	r17, Y+22	; 0x16
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	8c 83       	std	Y+4, r24	; 0x04
     af4:	1a 83       	std	Y+2, r17	; 0x02
     af6:	09 83       	std	Y+1, r16	; 0x01
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	9f e7       	ldi	r25, 0x7F	; 127
     afc:	9e 83       	std	Y+6, r25	; 0x06
     afe:	8d 83       	std	Y+5, r24	; 0x05
     b00:	ae 01       	movw	r20, r28
     b02:	47 5e       	subi	r20, 0xE7	; 231
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	6f 89       	ldd	r22, Y+23	; 0x17
     b08:	78 8d       	ldd	r23, Y+24	; 0x18
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	10 d0       	rcall	.+32     	; 0xb30 <vfprintf>
     b10:	ef 81       	ldd	r30, Y+7	; 0x07
     b12:	f8 85       	ldd	r31, Y+8	; 0x08
     b14:	e0 0f       	add	r30, r16
     b16:	f1 1f       	adc	r31, r17
     b18:	10 82       	st	Z, r1
     b1a:	2e 96       	adiw	r28, 0x0e	; 14
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	08 95       	ret

00000b30 <vfprintf>:
     b30:	2f 92       	push	r2
     b32:	3f 92       	push	r3
     b34:	4f 92       	push	r4
     b36:	5f 92       	push	r5
     b38:	6f 92       	push	r6
     b3a:	7f 92       	push	r7
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	2b 97       	sbiw	r28, 0x0b	; 11
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	6c 01       	movw	r12, r24
     b66:	7b 01       	movw	r14, r22
     b68:	8a 01       	movw	r16, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	17 82       	std	Z+7, r1	; 0x07
     b6e:	16 82       	std	Z+6, r1	; 0x06
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	81 ff       	sbrs	r24, 1
     b74:	bf c1       	rjmp	.+894    	; 0xef4 <vfprintf+0x3c4>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	3c 01       	movw	r6, r24
     b7c:	f6 01       	movw	r30, r12
     b7e:	93 81       	ldd	r25, Z+3	; 0x03
     b80:	f7 01       	movw	r30, r14
     b82:	93 fd       	sbrc	r25, 3
     b84:	85 91       	lpm	r24, Z+
     b86:	93 ff       	sbrs	r25, 3
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <vfprintf+0x62>
     b90:	ad c1       	rjmp	.+858    	; 0xeec <vfprintf+0x3bc>
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	39 f4       	brne	.+14     	; 0xba4 <vfprintf+0x74>
     b96:	93 fd       	sbrc	r25, 3
     b98:	85 91       	lpm	r24, Z+
     b9a:	93 ff       	sbrs	r25, 3
     b9c:	81 91       	ld	r24, Z+
     b9e:	7f 01       	movw	r14, r30
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	21 f4       	brne	.+8      	; 0xbac <vfprintf+0x7c>
     ba4:	b6 01       	movw	r22, r12
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	d6 d1       	rcall	.+940    	; 0xf56 <fputc>
     baa:	e8 cf       	rjmp	.-48     	; 0xb7c <vfprintf+0x4c>
     bac:	91 2c       	mov	r9, r1
     bae:	21 2c       	mov	r2, r1
     bb0:	31 2c       	mov	r3, r1
     bb2:	ff e1       	ldi	r31, 0x1F	; 31
     bb4:	f3 15       	cp	r31, r3
     bb6:	d8 f0       	brcs	.+54     	; 0xbee <vfprintf+0xbe>
     bb8:	8b 32       	cpi	r24, 0x2B	; 43
     bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0xaa>
     bbc:	38 f4       	brcc	.+14     	; 0xbcc <vfprintf+0x9c>
     bbe:	80 32       	cpi	r24, 0x20	; 32
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <vfprintf+0xb0>
     bc2:	83 32       	cpi	r24, 0x23	; 35
     bc4:	a1 f4       	brne	.+40     	; 0xbee <vfprintf+0xbe>
     bc6:	23 2d       	mov	r18, r3
     bc8:	20 61       	ori	r18, 0x10	; 16
     bca:	1d c0       	rjmp	.+58     	; 0xc06 <vfprintf+0xd6>
     bcc:	8d 32       	cpi	r24, 0x2D	; 45
     bce:	61 f0       	breq	.+24     	; 0xbe8 <vfprintf+0xb8>
     bd0:	80 33       	cpi	r24, 0x30	; 48
     bd2:	69 f4       	brne	.+26     	; 0xbee <vfprintf+0xbe>
     bd4:	23 2d       	mov	r18, r3
     bd6:	21 60       	ori	r18, 0x01	; 1
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <vfprintf+0xd6>
     bda:	83 2d       	mov	r24, r3
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	38 2e       	mov	r3, r24
     be0:	e3 2d       	mov	r30, r3
     be2:	e4 60       	ori	r30, 0x04	; 4
     be4:	3e 2e       	mov	r3, r30
     be6:	2a c0       	rjmp	.+84     	; 0xc3c <vfprintf+0x10c>
     be8:	f3 2d       	mov	r31, r3
     bea:	f8 60       	ori	r31, 0x08	; 8
     bec:	1d c0       	rjmp	.+58     	; 0xc28 <vfprintf+0xf8>
     bee:	37 fc       	sbrc	r3, 7
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <vfprintf+0x11c>
     bf2:	20 ed       	ldi	r18, 0xD0	; 208
     bf4:	28 0f       	add	r18, r24
     bf6:	2a 30       	cpi	r18, 0x0A	; 10
     bf8:	40 f0       	brcs	.+16     	; 0xc0a <vfprintf+0xda>
     bfa:	8e 32       	cpi	r24, 0x2E	; 46
     bfc:	b9 f4       	brne	.+46     	; 0xc2c <vfprintf+0xfc>
     bfe:	36 fc       	sbrc	r3, 6
     c00:	75 c1       	rjmp	.+746    	; 0xeec <vfprintf+0x3bc>
     c02:	23 2d       	mov	r18, r3
     c04:	20 64       	ori	r18, 0x40	; 64
     c06:	32 2e       	mov	r3, r18
     c08:	19 c0       	rjmp	.+50     	; 0xc3c <vfprintf+0x10c>
     c0a:	36 fe       	sbrs	r3, 6
     c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0xea>
     c0e:	8a e0       	ldi	r24, 0x0A	; 10
     c10:	98 9e       	mul	r9, r24
     c12:	20 0d       	add	r18, r0
     c14:	11 24       	eor	r1, r1
     c16:	92 2e       	mov	r9, r18
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <vfprintf+0x10c>
     c1a:	ea e0       	ldi	r30, 0x0A	; 10
     c1c:	2e 9e       	mul	r2, r30
     c1e:	20 0d       	add	r18, r0
     c20:	11 24       	eor	r1, r1
     c22:	22 2e       	mov	r2, r18
     c24:	f3 2d       	mov	r31, r3
     c26:	f0 62       	ori	r31, 0x20	; 32
     c28:	3f 2e       	mov	r3, r31
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <vfprintf+0x10c>
     c2c:	8c 36       	cpi	r24, 0x6C	; 108
     c2e:	21 f4       	brne	.+8      	; 0xc38 <vfprintf+0x108>
     c30:	83 2d       	mov	r24, r3
     c32:	80 68       	ori	r24, 0x80	; 128
     c34:	38 2e       	mov	r3, r24
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x10c>
     c38:	88 36       	cpi	r24, 0x68	; 104
     c3a:	41 f4       	brne	.+16     	; 0xc4c <vfprintf+0x11c>
     c3c:	f7 01       	movw	r30, r14
     c3e:	93 fd       	sbrc	r25, 3
     c40:	85 91       	lpm	r24, Z+
     c42:	93 ff       	sbrs	r25, 3
     c44:	81 91       	ld	r24, Z+
     c46:	7f 01       	movw	r14, r30
     c48:	81 11       	cpse	r24, r1
     c4a:	b3 cf       	rjmp	.-154    	; 0xbb2 <vfprintf+0x82>
     c4c:	98 2f       	mov	r25, r24
     c4e:	9f 7d       	andi	r25, 0xDF	; 223
     c50:	95 54       	subi	r25, 0x45	; 69
     c52:	93 30       	cpi	r25, 0x03	; 3
     c54:	28 f4       	brcc	.+10     	; 0xc60 <vfprintf+0x130>
     c56:	0c 5f       	subi	r16, 0xFC	; 252
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	9f e3       	ldi	r25, 0x3F	; 63
     c5c:	99 83       	std	Y+1, r25	; 0x01
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <vfprintf+0x14a>
     c60:	83 36       	cpi	r24, 0x63	; 99
     c62:	31 f0       	breq	.+12     	; 0xc70 <vfprintf+0x140>
     c64:	83 37       	cpi	r24, 0x73	; 115
     c66:	71 f0       	breq	.+28     	; 0xc84 <vfprintf+0x154>
     c68:	83 35       	cpi	r24, 0x53	; 83
     c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0x13e>
     c6c:	55 c0       	rjmp	.+170    	; 0xd18 <vfprintf+0x1e8>
     c6e:	20 c0       	rjmp	.+64     	; 0xcb0 <vfprintf+0x180>
     c70:	f8 01       	movw	r30, r16
     c72:	80 81       	ld	r24, Z
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	88 24       	eor	r8, r8
     c7c:	83 94       	inc	r8
     c7e:	91 2c       	mov	r9, r1
     c80:	53 01       	movw	r10, r6
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <vfprintf+0x178>
     c84:	28 01       	movw	r4, r16
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	4f 0e       	add	r4, r31
     c8a:	51 1c       	adc	r5, r1
     c8c:	f8 01       	movw	r30, r16
     c8e:	a0 80       	ld	r10, Z
     c90:	b1 80       	ldd	r11, Z+1	; 0x01
     c92:	36 fe       	sbrs	r3, 6
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x16c>
     c96:	69 2d       	mov	r22, r9
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x170>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	c5 01       	movw	r24, r10
     ca2:	4e d1       	rcall	.+668    	; 0xf40 <strnlen>
     ca4:	4c 01       	movw	r8, r24
     ca6:	82 01       	movw	r16, r4
     ca8:	f3 2d       	mov	r31, r3
     caa:	ff 77       	andi	r31, 0x7F	; 127
     cac:	3f 2e       	mov	r3, r31
     cae:	15 c0       	rjmp	.+42     	; 0xcda <vfprintf+0x1aa>
     cb0:	28 01       	movw	r4, r16
     cb2:	22 e0       	ldi	r18, 0x02	; 2
     cb4:	42 0e       	add	r4, r18
     cb6:	51 1c       	adc	r5, r1
     cb8:	f8 01       	movw	r30, r16
     cba:	a0 80       	ld	r10, Z
     cbc:	b1 80       	ldd	r11, Z+1	; 0x01
     cbe:	36 fe       	sbrs	r3, 6
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x198>
     cc2:	69 2d       	mov	r22, r9
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x19c>
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	c5 01       	movw	r24, r10
     cce:	2d d1       	rcall	.+602    	; 0xf2a <strnlen_P>
     cd0:	4c 01       	movw	r8, r24
     cd2:	f3 2d       	mov	r31, r3
     cd4:	f0 68       	ori	r31, 0x80	; 128
     cd6:	3f 2e       	mov	r3, r31
     cd8:	82 01       	movw	r16, r4
     cda:	33 fc       	sbrc	r3, 3
     cdc:	19 c0       	rjmp	.+50     	; 0xd10 <vfprintf+0x1e0>
     cde:	82 2d       	mov	r24, r2
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	88 16       	cp	r8, r24
     ce4:	99 06       	cpc	r9, r25
     ce6:	a0 f4       	brcc	.+40     	; 0xd10 <vfprintf+0x1e0>
     ce8:	b6 01       	movw	r22, r12
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	33 d1       	rcall	.+614    	; 0xf56 <fputc>
     cf0:	2a 94       	dec	r2
     cf2:	f5 cf       	rjmp	.-22     	; 0xcde <vfprintf+0x1ae>
     cf4:	f5 01       	movw	r30, r10
     cf6:	37 fc       	sbrc	r3, 7
     cf8:	85 91       	lpm	r24, Z+
     cfa:	37 fe       	sbrs	r3, 7
     cfc:	81 91       	ld	r24, Z+
     cfe:	5f 01       	movw	r10, r30
     d00:	b6 01       	movw	r22, r12
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	28 d1       	rcall	.+592    	; 0xf56 <fputc>
     d06:	21 10       	cpse	r2, r1
     d08:	2a 94       	dec	r2
     d0a:	21 e0       	ldi	r18, 0x01	; 1
     d0c:	82 1a       	sub	r8, r18
     d0e:	91 08       	sbc	r9, r1
     d10:	81 14       	cp	r8, r1
     d12:	91 04       	cpc	r9, r1
     d14:	79 f7       	brne	.-34     	; 0xcf4 <vfprintf+0x1c4>
     d16:	e1 c0       	rjmp	.+450    	; 0xeda <vfprintf+0x3aa>
     d18:	84 36       	cpi	r24, 0x64	; 100
     d1a:	11 f0       	breq	.+4      	; 0xd20 <vfprintf+0x1f0>
     d1c:	89 36       	cpi	r24, 0x69	; 105
     d1e:	39 f5       	brne	.+78     	; 0xd6e <vfprintf+0x23e>
     d20:	f8 01       	movw	r30, r16
     d22:	37 fe       	sbrs	r3, 7
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <vfprintf+0x204>
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	0c 5f       	subi	r16, 0xFC	; 252
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	08 c0       	rjmp	.+16     	; 0xd44 <vfprintf+0x214>
     d34:	60 81       	ld	r22, Z
     d36:	71 81       	ldd	r23, Z+1	; 0x01
     d38:	07 2e       	mov	r0, r23
     d3a:	00 0c       	add	r0, r0
     d3c:	88 0b       	sbc	r24, r24
     d3e:	99 0b       	sbc	r25, r25
     d40:	0e 5f       	subi	r16, 0xFE	; 254
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	f3 2d       	mov	r31, r3
     d46:	ff 76       	andi	r31, 0x6F	; 111
     d48:	3f 2e       	mov	r3, r31
     d4a:	97 ff       	sbrs	r25, 7
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <vfprintf+0x230>
     d4e:	90 95       	com	r25
     d50:	80 95       	com	r24
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	f0 68       	ori	r31, 0x80	; 128
     d5e:	3f 2e       	mov	r3, r31
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	a3 01       	movw	r20, r6
     d66:	33 d1       	rcall	.+614    	; 0xfce <__ultoa_invert>
     d68:	88 2e       	mov	r8, r24
     d6a:	86 18       	sub	r8, r6
     d6c:	44 c0       	rjmp	.+136    	; 0xdf6 <vfprintf+0x2c6>
     d6e:	85 37       	cpi	r24, 0x75	; 117
     d70:	31 f4       	brne	.+12     	; 0xd7e <vfprintf+0x24e>
     d72:	23 2d       	mov	r18, r3
     d74:	2f 7e       	andi	r18, 0xEF	; 239
     d76:	b2 2e       	mov	r11, r18
     d78:	2a e0       	ldi	r18, 0x0A	; 10
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	25 c0       	rjmp	.+74     	; 0xdc8 <vfprintf+0x298>
     d7e:	93 2d       	mov	r25, r3
     d80:	99 7f       	andi	r25, 0xF9	; 249
     d82:	b9 2e       	mov	r11, r25
     d84:	8f 36       	cpi	r24, 0x6F	; 111
     d86:	c1 f0       	breq	.+48     	; 0xdb8 <vfprintf+0x288>
     d88:	18 f4       	brcc	.+6      	; 0xd90 <vfprintf+0x260>
     d8a:	88 35       	cpi	r24, 0x58	; 88
     d8c:	79 f0       	breq	.+30     	; 0xdac <vfprintf+0x27c>
     d8e:	ae c0       	rjmp	.+348    	; 0xeec <vfprintf+0x3bc>
     d90:	80 37       	cpi	r24, 0x70	; 112
     d92:	19 f0       	breq	.+6      	; 0xd9a <vfprintf+0x26a>
     d94:	88 37       	cpi	r24, 0x78	; 120
     d96:	21 f0       	breq	.+8      	; 0xda0 <vfprintf+0x270>
     d98:	a9 c0       	rjmp	.+338    	; 0xeec <vfprintf+0x3bc>
     d9a:	e9 2f       	mov	r30, r25
     d9c:	e0 61       	ori	r30, 0x10	; 16
     d9e:	be 2e       	mov	r11, r30
     da0:	b4 fe       	sbrs	r11, 4
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vfprintf+0x28e>
     da4:	fb 2d       	mov	r31, r11
     da6:	f4 60       	ori	r31, 0x04	; 4
     da8:	bf 2e       	mov	r11, r31
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <vfprintf+0x28e>
     dac:	34 fe       	sbrs	r3, 4
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <vfprintf+0x294>
     db0:	29 2f       	mov	r18, r25
     db2:	26 60       	ori	r18, 0x06	; 6
     db4:	b2 2e       	mov	r11, r18
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x294>
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <vfprintf+0x298>
     dbe:	20 e1       	ldi	r18, 0x10	; 16
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x298>
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	32 e0       	ldi	r19, 0x02	; 2
     dc8:	f8 01       	movw	r30, r16
     dca:	b7 fe       	sbrs	r11, 7
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <vfprintf+0x2ac>
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	0c 5f       	subi	r16, 0xFC	; 252
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vfprintf+0x2b8>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 5f       	subi	r16, 0xFE	; 254
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	a3 01       	movw	r20, r6
     dea:	f1 d0       	rcall	.+482    	; 0xfce <__ultoa_invert>
     dec:	88 2e       	mov	r8, r24
     dee:	86 18       	sub	r8, r6
     df0:	fb 2d       	mov	r31, r11
     df2:	ff 77       	andi	r31, 0x7F	; 127
     df4:	3f 2e       	mov	r3, r31
     df6:	36 fe       	sbrs	r3, 6
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <vfprintf+0x2e4>
     dfa:	23 2d       	mov	r18, r3
     dfc:	2e 7f       	andi	r18, 0xFE	; 254
     dfe:	a2 2e       	mov	r10, r18
     e00:	89 14       	cp	r8, r9
     e02:	58 f4       	brcc	.+22     	; 0xe1a <vfprintf+0x2ea>
     e04:	34 fe       	sbrs	r3, 4
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <vfprintf+0x2ee>
     e08:	32 fc       	sbrc	r3, 2
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x2ee>
     e0c:	83 2d       	mov	r24, r3
     e0e:	8e 7e       	andi	r24, 0xEE	; 238
     e10:	a8 2e       	mov	r10, r24
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <vfprintf+0x2ee>
     e14:	b8 2c       	mov	r11, r8
     e16:	a3 2c       	mov	r10, r3
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x2f0>
     e1a:	b8 2c       	mov	r11, r8
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <vfprintf+0x2f0>
     e1e:	b9 2c       	mov	r11, r9
     e20:	a4 fe       	sbrs	r10, 4
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <vfprintf+0x312>
     e24:	fe 01       	movw	r30, r28
     e26:	e8 0d       	add	r30, r8
     e28:	f1 1d       	adc	r31, r1
     e2a:	80 81       	ld	r24, Z
     e2c:	80 33       	cpi	r24, 0x30	; 48
     e2e:	21 f4       	brne	.+8      	; 0xe38 <vfprintf+0x308>
     e30:	9a 2d       	mov	r25, r10
     e32:	99 7e       	andi	r25, 0xE9	; 233
     e34:	a9 2e       	mov	r10, r25
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <vfprintf+0x31a>
     e38:	a2 fe       	sbrs	r10, 2
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x318>
     e3c:	b3 94       	inc	r11
     e3e:	b3 94       	inc	r11
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <vfprintf+0x31a>
     e42:	8a 2d       	mov	r24, r10
     e44:	86 78       	andi	r24, 0x86	; 134
     e46:	09 f0       	breq	.+2      	; 0xe4a <vfprintf+0x31a>
     e48:	b3 94       	inc	r11
     e4a:	a3 fc       	sbrc	r10, 3
     e4c:	10 c0       	rjmp	.+32     	; 0xe6e <vfprintf+0x33e>
     e4e:	a0 fe       	sbrs	r10, 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x32e>
     e52:	b2 14       	cp	r11, r2
     e54:	80 f4       	brcc	.+32     	; 0xe76 <vfprintf+0x346>
     e56:	28 0c       	add	r2, r8
     e58:	92 2c       	mov	r9, r2
     e5a:	9b 18       	sub	r9, r11
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x348>
     e5e:	b2 14       	cp	r11, r2
     e60:	58 f4       	brcc	.+22     	; 0xe78 <vfprintf+0x348>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	76 d0       	rcall	.+236    	; 0xf56 <fputc>
     e6a:	b3 94       	inc	r11
     e6c:	f8 cf       	rjmp	.-16     	; 0xe5e <vfprintf+0x32e>
     e6e:	b2 14       	cp	r11, r2
     e70:	18 f4       	brcc	.+6      	; 0xe78 <vfprintf+0x348>
     e72:	2b 18       	sub	r2, r11
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x34a>
     e76:	98 2c       	mov	r9, r8
     e78:	21 2c       	mov	r2, r1
     e7a:	a4 fe       	sbrs	r10, 4
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <vfprintf+0x36c>
     e7e:	b6 01       	movw	r22, r12
     e80:	80 e3       	ldi	r24, 0x30	; 48
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	68 d0       	rcall	.+208    	; 0xf56 <fputc>
     e86:	a2 fe       	sbrs	r10, 2
     e88:	16 c0       	rjmp	.+44     	; 0xeb6 <vfprintf+0x386>
     e8a:	a1 fc       	sbrc	r10, 1
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <vfprintf+0x364>
     e8e:	88 e7       	ldi	r24, 0x78	; 120
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <vfprintf+0x368>
     e94:	88 e5       	ldi	r24, 0x58	; 88
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	b6 01       	movw	r22, r12
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <vfprintf+0x384>
     e9c:	8a 2d       	mov	r24, r10
     e9e:	86 78       	andi	r24, 0x86	; 134
     ea0:	51 f0       	breq	.+20     	; 0xeb6 <vfprintf+0x386>
     ea2:	a1 fe       	sbrs	r10, 1
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x37a>
     ea6:	8b e2       	ldi	r24, 0x2B	; 43
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <vfprintf+0x37c>
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	a7 fc       	sbrc	r10, 7
     eae:	8d e2       	ldi	r24, 0x2D	; 45
     eb0:	b6 01       	movw	r22, r12
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	50 d0       	rcall	.+160    	; 0xf56 <fputc>
     eb6:	89 14       	cp	r8, r9
     eb8:	30 f4       	brcc	.+12     	; 0xec6 <vfprintf+0x396>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	4a d0       	rcall	.+148    	; 0xf56 <fputc>
     ec2:	9a 94       	dec	r9
     ec4:	f8 cf       	rjmp	.-16     	; 0xeb6 <vfprintf+0x386>
     ec6:	8a 94       	dec	r8
     ec8:	f3 01       	movw	r30, r6
     eca:	e8 0d       	add	r30, r8
     ecc:	f1 1d       	adc	r31, r1
     ece:	80 81       	ld	r24, Z
     ed0:	b6 01       	movw	r22, r12
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	40 d0       	rcall	.+128    	; 0xf56 <fputc>
     ed6:	81 10       	cpse	r8, r1
     ed8:	f6 cf       	rjmp	.-20     	; 0xec6 <vfprintf+0x396>
     eda:	22 20       	and	r2, r2
     edc:	09 f4       	brne	.+2      	; 0xee0 <vfprintf+0x3b0>
     ede:	4e ce       	rjmp	.-868    	; 0xb7c <vfprintf+0x4c>
     ee0:	b6 01       	movw	r22, r12
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	37 d0       	rcall	.+110    	; 0xf56 <fputc>
     ee8:	2a 94       	dec	r2
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <vfprintf+0x3aa>
     eec:	f6 01       	movw	r30, r12
     eee:	86 81       	ldd	r24, Z+6	; 0x06
     ef0:	97 81       	ldd	r25, Z+7	; 0x07
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x3c8>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	9f ef       	ldi	r25, 0xFF	; 255
     ef8:	2b 96       	adiw	r28, 0x0b	; 11
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	8f 90       	pop	r8
     f1c:	7f 90       	pop	r7
     f1e:	6f 90       	pop	r6
     f20:	5f 90       	pop	r5
     f22:	4f 90       	pop	r4
     f24:	3f 90       	pop	r3
     f26:	2f 90       	pop	r2
     f28:	08 95       	ret

00000f2a <strnlen_P>:
     f2a:	fc 01       	movw	r30, r24
     f2c:	05 90       	lpm	r0, Z+
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	70 40       	sbci	r23, 0x00	; 0
     f32:	01 10       	cpse	r0, r1
     f34:	d8 f7       	brcc	.-10     	; 0xf2c <strnlen_P+0x2>
     f36:	80 95       	com	r24
     f38:	90 95       	com	r25
     f3a:	8e 0f       	add	r24, r30
     f3c:	9f 1f       	adc	r25, r31
     f3e:	08 95       	ret

00000f40 <strnlen>:
     f40:	fc 01       	movw	r30, r24
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	01 90       	ld	r0, Z+
     f48:	01 10       	cpse	r0, r1
     f4a:	d8 f7       	brcc	.-10     	; 0xf42 <strnlen+0x2>
     f4c:	80 95       	com	r24
     f4e:	90 95       	com	r25
     f50:	8e 0f       	add	r24, r30
     f52:	9f 1f       	adc	r25, r31
     f54:	08 95       	ret

00000f56 <fputc>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	fb 01       	movw	r30, r22
     f60:	23 81       	ldd	r18, Z+3	; 0x03
     f62:	21 fd       	sbrc	r18, 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <fputc+0x16>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <fputc+0x6e>
     f6c:	22 ff       	sbrs	r18, 2
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <fputc+0x46>
     f70:	46 81       	ldd	r20, Z+6	; 0x06
     f72:	57 81       	ldd	r21, Z+7	; 0x07
     f74:	24 81       	ldd	r18, Z+4	; 0x04
     f76:	35 81       	ldd	r19, Z+5	; 0x05
     f78:	42 17       	cp	r20, r18
     f7a:	53 07       	cpc	r21, r19
     f7c:	44 f4       	brge	.+16     	; 0xf8e <fputc+0x38>
     f7e:	a0 81       	ld	r26, Z
     f80:	b1 81       	ldd	r27, Z+1	; 0x01
     f82:	9d 01       	movw	r18, r26
     f84:	2f 5f       	subi	r18, 0xFF	; 255
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	20 83       	st	Z, r18
     f8c:	8c 93       	st	X, r24
     f8e:	26 81       	ldd	r18, Z+6	; 0x06
     f90:	37 81       	ldd	r19, Z+7	; 0x07
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	37 83       	std	Z+7, r19	; 0x07
     f98:	26 83       	std	Z+6, r18	; 0x06
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <fputc+0x6e>
     f9c:	8b 01       	movw	r16, r22
     f9e:	ec 01       	movw	r28, r24
     fa0:	fb 01       	movw	r30, r22
     fa2:	00 84       	ldd	r0, Z+8	; 0x08
     fa4:	f1 85       	ldd	r31, Z+9	; 0x09
     fa6:	e0 2d       	mov	r30, r0
     fa8:	09 95       	icall
     faa:	89 2b       	or	r24, r25
     fac:	e1 f6       	brne	.-72     	; 0xf66 <fputc+0x10>
     fae:	d8 01       	movw	r26, r16
     fb0:	16 96       	adiw	r26, 0x06	; 6
     fb2:	8d 91       	ld	r24, X+
     fb4:	9c 91       	ld	r25, X
     fb6:	17 97       	sbiw	r26, 0x07	; 7
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	17 96       	adiw	r26, 0x07	; 7
     fbc:	9c 93       	st	X, r25
     fbe:	8e 93       	st	-X, r24
     fc0:	16 97       	sbiw	r26, 0x06	; 6
     fc2:	ce 01       	movw	r24, r28
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <__ultoa_invert>:
     fce:	fa 01       	movw	r30, r20
     fd0:	aa 27       	eor	r26, r26
     fd2:	28 30       	cpi	r18, 0x08	; 8
     fd4:	51 f1       	breq	.+84     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
     fd6:	20 31       	cpi	r18, 0x10	; 16
     fd8:	81 f1       	breq	.+96     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     fda:	e8 94       	clt
     fdc:	6f 93       	push	r22
     fde:	6e 7f       	andi	r22, 0xFE	; 254
     fe0:	6e 5f       	subi	r22, 0xFE	; 254
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	af 4f       	sbci	r26, 0xFF	; 255
     fea:	b1 e0       	ldi	r27, 0x01	; 1
     fec:	3e d0       	rcall	.+124    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     fee:	b4 e0       	ldi	r27, 0x04	; 4
     ff0:	3c d0       	rcall	.+120    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     ff2:	67 0f       	add	r22, r23
     ff4:	78 1f       	adc	r23, r24
     ff6:	89 1f       	adc	r24, r25
     ff8:	9a 1f       	adc	r25, r26
     ffa:	a1 1d       	adc	r26, r1
     ffc:	68 0f       	add	r22, r24
     ffe:	79 1f       	adc	r23, r25
    1000:	8a 1f       	adc	r24, r26
    1002:	91 1d       	adc	r25, r1
    1004:	a1 1d       	adc	r26, r1
    1006:	6a 0f       	add	r22, r26
    1008:	71 1d       	adc	r23, r1
    100a:	81 1d       	adc	r24, r1
    100c:	91 1d       	adc	r25, r1
    100e:	a1 1d       	adc	r26, r1
    1010:	20 d0       	rcall	.+64     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1012:	09 f4       	brne	.+2      	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
    1014:	68 94       	set
    1016:	3f 91       	pop	r19
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	26 9f       	mul	r18, r22
    101c:	11 24       	eor	r1, r1
    101e:	30 19       	sub	r19, r0
    1020:	30 5d       	subi	r19, 0xD0	; 208
    1022:	31 93       	st	Z+, r19
    1024:	de f6       	brtc	.-74     	; 0xfdc <__ultoa_invert+0xe>
    1026:	cf 01       	movw	r24, r30
    1028:	08 95       	ret
    102a:	46 2f       	mov	r20, r22
    102c:	47 70       	andi	r20, 0x07	; 7
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	41 93       	st	Z+, r20
    1032:	b3 e0       	ldi	r27, 0x03	; 3
    1034:	0f d0       	rcall	.+30     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1036:	c9 f7       	brne	.-14     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1038:	f6 cf       	rjmp	.-20     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    103a:	46 2f       	mov	r20, r22
    103c:	4f 70       	andi	r20, 0x0F	; 15
    103e:	40 5d       	subi	r20, 0xD0	; 208
    1040:	4a 33       	cpi	r20, 0x3A	; 58
    1042:	18 f0       	brcs	.+6      	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
    1044:	49 5d       	subi	r20, 0xD9	; 217
    1046:	31 fd       	sbrc	r19, 1
    1048:	40 52       	subi	r20, 0x20	; 32
    104a:	41 93       	st	Z+, r20
    104c:	02 d0       	rcall	.+4      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104e:	a9 f7       	brne	.-22     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1050:	ea cf       	rjmp	.-44     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1052:	b4 e0       	ldi	r27, 0x04	; 4
    1054:	a6 95       	lsr	r26
    1056:	97 95       	ror	r25
    1058:	87 95       	ror	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	ba 95       	dec	r27
    1060:	c9 f7       	brne	.-14     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 05       	cpc	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	08 95       	ret
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	0a 2e       	mov	r0, r26
    1070:	06 94       	lsr	r0
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	ba 95       	dec	r27
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    107e:	62 0f       	add	r22, r18
    1080:	73 1f       	adc	r23, r19
    1082:	84 1f       	adc	r24, r20
    1084:	95 1f       	adc	r25, r21
    1086:	a0 1d       	adc	r26, r0
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
